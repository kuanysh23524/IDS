package com.example.diplom_Kuks_team.kuksteam.services;


import jakarta.annotation.PostConstruct;
import org.pcap4j.core.*;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.Packet;
import org.pcap4j.packet.TcpPacket;
import org.pcap4j.packet.UdpPacket;
import org.springframework.stereotype.Service;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.TimeoutException;

@Service
public class NetworkCaptureService {

    @PostConstruct
    public void startCapture() {
        capturePackets();
    }

    public void capturePackets() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            List<PcapNetworkInterface> devices = Pcaps.findAllDevs();

            if (devices.isEmpty()) {
                System.out.println("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.");
                return;
            }

            System.out.println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:");
            for (int i = 0; i < devices.size(); i++) {
                System.out.println(i + ": " + devices.get(i).getName() + " - " + devices.get(i).getDescription());
            }

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º CSV-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
            FileWriter writer = new FileWriter("src/main/resources/data/live_traffic.csv");
            writer.append("src_ip,dst_ip,src_port,dst_port,protocol,bytes\n");

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            for (PcapNetworkInterface device : devices) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Loopback-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                if (device.getName().contains("Loopback")) {
                    continue;
                }

                System.out.println("üîç –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " + device.getName());

                try (PcapHandle handle = device.openLive(65536, PcapNetworkInterface.PromiscuousMode.PROMISCUOUS, 10)) {
                    System.out.println("‚úÖ –ó–∞—Ö–≤–∞—Ç –Ω–∞—á–∞—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: " + device.getName());

                    while (true) {  // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
                        try {
                            Packet packet = handle.getNextPacketEx();

                            if (packet.contains(IpV4Packet.class)) {
                                IpV4Packet ipPacket = packet.get(IpV4Packet.class);
                                String srcIp = ipPacket.getHeader().getSrcAddr().getHostAddress();
                                String dstIp = ipPacket.getHeader().getDstAddr().getHostAddress();
                                int length = packet.length();
                                String protocol = "OTHER";
                                int srcPort = 0, dstPort = 0;

                                if (packet.contains(TcpPacket.class)) {
                                    TcpPacket tcpPacket = packet.get(TcpPacket.class);
                                    srcPort = tcpPacket.getHeader().getSrcPort().valueAsInt();
                                    dstPort = tcpPacket.getHeader().getDstPort().valueAsInt();
                                    protocol = "TCP";
                                } else if (packet.contains(UdpPacket.class)) {
                                    UdpPacket udpPacket = packet.get(UdpPacket.class);
                                    srcPort = udpPacket.getHeader().getSrcPort().valueAsInt();
                                    dstPort = udpPacket.getHeader().getDstPort().valueAsInt();
                                    protocol = "UDP";
                                }

                                writer.append(srcIp).append(",")
                                        .append(dstIp).append(",")
                                        .append(String.valueOf(srcPort)).append(",")
                                        .append(String.valueOf(dstPort)).append(",")
                                        .append(protocol).append(",")
                                        .append(String.valueOf(length)).append("\n");

                                writer.flush();  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ—Ä—å
                            }
                        } catch (TimeoutException e) {
                            System.out.println("‚è≥ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞...");
                        }
                    }

                } catch (PcapNativeException | NotOpenException e) {
                    System.out.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å " + device.getName() + ": " + e.getMessage());
                }
            }

            writer.close();
            System.out.println("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ live_traffic.csv");

        } catch (IOException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: " + e.getMessage());
        } catch (PcapNativeException e) {
            throw new RuntimeException(e);
        }
    }
}
