package com.example.diplom_Kuks_team.kuksteam.services;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import weka.classifiers.Classifier;
import weka.classifiers.trees.J48;
import weka.core.Instances;
import weka.core.converters.CSVLoader;
import weka.core.SerializationHelper;

import java.io.*;
import java.nio.file.Files;
import java.util.List;

@Service
public class WekaService {

    private static final String DATA_DIR = "src/main/resources/data";
    private static final String CSV_FILE_PATH = DATA_DIR + "/data.csv";
    private static final String MODEL_FILE_PATH = DATA_DIR + "/model.model";

    public String uploadAndProcessCSV(MultipartFile file) {
        try {
            String resourcePath = new File("src/main/resources/data").getAbsolutePath();
            File directory = new File(resourcePath);
            if (!directory.exists()) {
                directory.mkdirs(); // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            }

            // üìÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
            File csvFile = new File(directory, "data.csv");
            file.transferTo(csvFile);

            // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            List<String> lines = Files.readAllLines(csvFile.toPath());
            if (lines.isEmpty()) {
                return "‚ùå –û—à–∏–±–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π!";
            }

            return "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ " + csvFile.getAbsolutePath();
        } catch (IOException e) {
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: " + e.getMessage();
        }
    }

    public String trainModel() {
        try {
            File csvFile = new File(CSV_FILE_PATH);

            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if (!csvFile.exists()) {
                return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!";
            }

            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ
            if (csvFile.length() == 0) {
                return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –ø—É—Å—Ç–æ–π!";
            }

            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º CSV
            CSVLoader loader = new CSVLoader();
            loader.setSource(csvFile);
            Instances dataset = loader.getDataSet();

            // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if (dataset.numInstances() == 0) {
                return "‚ùå –û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö!";
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π –∞—Ç—Ä–∏–±—É—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü)
            dataset.setClassIndex(dataset.numAttributes() - 1);

            // –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π J48)
            Classifier model = new J48();
            model.buildClassifier(dataset);

            // üîπ –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
            File modelFile = new File(MODEL_FILE_PATH);
            SerializationHelper.write(modelFile.getAbsolutePath(), model);

            return "‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!";
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: " + e.getMessage();
        }
    }

    public String classifyInstance(String inputData) {
        try {
            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            File modelFile = new File(MODEL_FILE_PATH);
            if (!modelFile.exists()) {
                return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!";
            }
            Classifier model = (Classifier) SerializationHelper.read(modelFile.getAbsolutePath());

            // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Å –¥–∞–Ω–Ω—ã–º–∏
            CSVLoader loader = new CSVLoader();
            loader.setSource(new File(CSV_FILE_PATH));
            Instances dataset = loader.getDataSet();
            dataset.setClassIndex(dataset.numAttributes() - 1);

            // üîπ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            Instances instance = new Instances(dataset, 1);
            String[] values = inputData.split(",");
            double[] instanceValues = new double[dataset.numAttributes()];

            for (int i = 0; i < values.length; i++) {
                instanceValues[i] = Double.parseDouble(values[i]);
            }

            instance.add(dataset.firstInstance().copy(instanceValues));
            double result = model.classifyInstance(instance.firstInstance());

            return "‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + dataset.classAttribute().value((int) result);
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage();
        }
    }
}
